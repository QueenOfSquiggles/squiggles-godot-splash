[gd_resource type="ShaderMaterial" load_steps=15 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=16]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=17]
uniform_name = "Amount"

[sub_resource type="VisualShaderNodeScalarOp" id=18]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 5.0 ]
operator = 5

[sub_resource type="VisualShaderNodeScalarUniform" id=19]
uniform_name = "Strength"

[sub_resource type="VisualShaderNodeScalarFunc" id=20]
function = 18

[sub_resource type="VisualShaderNodeInput" id=21]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=22]
output_port_for_preview = 0
source = 5

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=24]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=25]

[sub_resource type="VisualShaderNodeInput" id=9]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=14]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorDecompose" id=15]
output_port_for_preview = 0

[sub_resource type="VisualShader" id=6]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float Amount;
uniform float Strength;



void vertex() {
// Output:0

}

void fragment() {
// Input:19
	vec3 n_out19p0 = vec3(UV, 0.0);

// Input:17

// Texture:18
	vec3 n_out18p0;
	float n_out18p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out19p0.xy);
		n_out18p0 = TEXTURE_tex_read.rgb;
		n_out18p1 = TEXTURE_tex_read.a;
	}

// ScalarUniform:11
	float n_out11p0 = Amount;

// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// VectorDecompose:9
	float n_out9p0 = n_out3p0.x;
	float n_out9p1 = n_out3p0.y;
	float n_out9p2 = n_out3p0.z;

// ScalarOp:10
	float n_in10p0 = 1.00000;
	float n_out10p0 = n_in10p0 - n_out9p0;

// ScalarUniform:14
	float n_out14p0 = Strength;

// ScalarOp:13
	float n_out13p0 = pow(n_out10p0, n_out14p0);

// ScalarOp:8
	float n_out8p0 = n_out11p0 + n_out13p0;

// ScalarFunc:16
	float n_out16p0 = min(max(n_out8p0, 0.0), 1.0);

// VectorOp:20
	vec3 n_out20p0 = n_out18p0 * vec3(n_out16p0);

// VectorDecompose:21
	float n_out21p0 = n_out20p0.x;
	float n_out21p1 = n_out20p0.y;
	float n_out21p2 = n_out20p0.z;

// Output:0
	COLOR.rgb = n_out18p0;
	COLOR.a = n_out21p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -213.189, -147.87 )
mode = 1
flags/light_only = false
flags/unshaded = true
nodes/fragment/0/position = Vector2( 640, 320 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -940, 660 )
nodes/fragment/8/node = SubResource( 14 )
nodes/fragment/8/position = Vector2( -140, 360 )
nodes/fragment/9/node = SubResource( 15 )
nodes/fragment/9/position = Vector2( -740, 640 )
nodes/fragment/10/node = SubResource( 16 )
nodes/fragment/10/position = Vector2( -480, 660 )
nodes/fragment/11/node = SubResource( 17 )
nodes/fragment/11/position = Vector2( -540, 320 )
nodes/fragment/13/node = SubResource( 18 )
nodes/fragment/13/position = Vector2( -260, 660 )
nodes/fragment/14/node = SubResource( 19 )
nodes/fragment/14/position = Vector2( -540, 440 )
nodes/fragment/16/node = SubResource( 20 )
nodes/fragment/16/position = Vector2( 140, 440 )
nodes/fragment/17/node = SubResource( 21 )
nodes/fragment/17/position = Vector2( -140, 180 )
nodes/fragment/18/node = SubResource( 22 )
nodes/fragment/18/position = Vector2( 80, 80 )
nodes/fragment/19/node = SubResource( 23 )
nodes/fragment/19/position = Vector2( -120, 80 )
nodes/fragment/20/node = SubResource( 24 )
nodes/fragment/20/position = Vector2( 360, 480 )
nodes/fragment/21/node = SubResource( 25 )
nodes/fragment/21/position = Vector2( 540, 520 )
nodes/fragment/connections = PoolIntArray( 3, 0, 9, 0, 9, 0, 10, 1, 10, 0, 13, 0, 13, 0, 8, 1, 11, 0, 8, 0, 14, 0, 13, 1, 8, 0, 16, 0, 19, 0, 18, 0, 17, 0, 18, 2, 18, 0, 0, 0, 16, 0, 20, 1, 18, 0, 20, 0, 20, 0, 21, 0, 21, 0, 0, 1 )

[resource]
shader = SubResource( 6 )
shader_param/Amount = -1.0
shader_param/Strength = 2.0
